{
  "openapi": "3.0.0",
  "info": {
    "title": "Chatzy AI API",
    "version": "1.0.0",
    "description": "Chatzy AI REST API for messaging, contact conversations, and agent interactions.",
    "contact": {
      "name": "Chatzy",
      "url": "https://chatzy.ai",
      "email": "support@chatzy.ai"
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication to access the API"
    },
    {
      "name": "Contact Conversations",
      "description": "Get contact conversations"
    },
    {
      "name": "Conversational AI Agent Interactions",
      "description": "Interact with the conversational AI agent"
    },
    {
      "name": "Authorized iframe Access",
      "description": "APIs for authorized iframe access"
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Use the `idToken` retrieved from `/get_id_token` as the Bearer token."
      }
    }
  },
  "servers": [
    {
      "url": "https://vevdoh3hve.execute-api.us-east-1.amazonaws.com/prod",
      "description": "Production Server"
    }
  ],
  "paths": {
    "/get_id_token": {
      "post": {
        "summary": "Get ID Token",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["user_email_id", "password"],
                "properties": {
                  "user_email_id": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "your-password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentication and token retrieval.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Successfully retrieved ID token"
                        },
                        "idToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        },
                        "expiryAt": {
                          "type": "integer",
                          "format": "int64",
                          "example": 1752577991000
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get_contact_conversations": {
      "get": {
        "summary": "Get Contact Conversations",
        "tags": ["Contact Conversations"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "user_email_id",
            "in": "query",
            "required": true,
            "schema": { "type": "string" },
            "description": "Email ID of the user whose contacts should be fetched."
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": { "type": "string" },
            "description": "Search by contact name, email, phone number or iframe user id."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of results to return (min 1, max 100)."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "Number of results to skip."
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["all", "unread", "live"],
              "default": "all"
            },
            "description": "Filter conversation status: all, unread, or live."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of contacts for whom there is a conversation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "contacts": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "contact_id": { "type": "string" },
                                  "contact_name": { "type": "string" },
                                  "phone_number": { "type": "string" },
                                  "email": { "type": "string" },
                                  "conversation_status": { "type": "string" },
                                  "assigned_to": { "type": "string" },
                                  "unread_message_count": { "type": "string" },
                                  "latest_message_time": {
                                    "type": "string",
                                    "format": "date-time"
                                  },
                                  "channels": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get_contact_conversation_messages": {
      "get": {
        "summary": "Get Messages for Contact",
        "tags": ["Contact Conversations"],
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "contact_id",
            "in": "query",
            "required": true,
            "description": "The unique ID of the contact to fetch messages for.",
            "schema": {
              "type": "string",
              "example": "096662f6-5acc-4699-923c-f7326936b39f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact with all conversations and messages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "contact": {
                              "type": "object",
                              "properties": {
                                "contact_id": { "type": "string" },
                                "user_email_id": { "type": "string" },
                                "first_name": { "type": "string" },
                                "last_name": { "type": "string" },
                                "phone_number": { "type": "string" },
                                "created_at": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "last_interacted_at": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "contact_queries": { "type": "integer" },
                                "is_blacklisted": { "type": "boolean" },
                                "is_frozen": { "type": "boolean" },
                                "frozen_until": {
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            },
                            "conversations": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "conversation_id": { "type": "string" },
                                  "conversation_status": { "type": "string" },
                                  "conversation_type": { "type": "string" },
                                  "assigned_to": { "type": "string" },
                                  "chatbot_id": { "type": "string" },
                                  "messages": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "message_id": { "type": "string" },
                                        "content": { "type": "string" },
                                        "role": { "type": "string" },
                                        "created_at": {
                                          "type": "string",
                                          "format": "date-time"
                                        },
                                        "message_order": { "type": "integer" },
                                        "wa_messages": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "status": { "type": "string" },
                                              "created_at": {
                                                "type": "string",
                                                "format": "date-time"
                                              },
                                              "data": { "type": "object" }
                                            }
                                          }
                                        },
                                        "instagram_messages": {
                                          "type": "array",
                                          "items": {}
                                        },
                                        "messenger_messages": {
                                          "type": "array",
                                          "items": {}
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/init_conversation": {
      "get": {
        "summary": "Initialize Conversation",
        "tags": ["Conversational AI Agent Interactions"],
        "parameters": [
          {
            "name": "chatbot_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "UUID of the chatbot to initiate conversation with."
          }
        ],
        "responses": {
          "200": {
            "description": "Conversation initialized successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "valid": { "type": "boolean" },
                        "conversation_id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "introductory_message": {
                          "type": "object",
                          "description": "Optional message shown at the beginning of the conversation.",
                          "properties": {
                            "switch": {
                              "type": "boolean",
                              "description": "Flag to show or hide the message."
                            },
                            "buttons": {
                              "type": "array",
                              "description": "Optional list of buttons for conversation starters.",
                              "items": {
                                "type": "string"
                              }
                            },
                            "content": {
                              "type": "string",
                              "description": "Text content of the introductory message.",
                              "example": "Hello! 👋"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get_inference": {
      "post": {
        "summary": "Send Message to Conversational AI Agent",
        "tags": ["Conversational AI Agent Interactions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["chatbot_id", "conversation_id", "messages"],
                "properties": {
                  "chatbot_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "UUID of the chatbot to which the message is sent.",
                    "example": "51de6a36-5532-49c2-888e-46754ce102ba"
                  },
                  "conversation_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "UUID of the ongoing conversation.",
                    "example": "96333140-53c3-4d1d-bbd1-edd150d46ea2"
                  },
                  "messages": {
                    "type": "object",
                    "required": ["role", "content"],
                    "description": "The message to send to the AI agent.",
                    "properties": {
                      "role": {
                        "type": "string",
                        "enum": ["user"],
                        "description": "Role of the message sender. Only 'user' is allowed here.",
                        "example": "user"
                      },
                      "content": {
                        "type": "string",
                        "description": "Text content of the user's message.",
                        "example": "Hi, I'm looking to book a stay at Sunset Villa."
                      }
                    }
                  },
                  "documents": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "file_name": {
                          "type": "string",
                          "description": "Name of the document.",
                          "example": "document.pdf"
                        },
                        "mime_type": {
                          "type": "string",
                          "description": "MIME type of the document.",
                          "example": "application/pdf"
                        },
                        "s3_url": {
                          "type": "string",
                          "description": "URL of the document in S3.",
                          "example": "https://s3.amazonaws.com/my-bucket/doc-1234"
                        }
                      }
                    }
                  },
                  "conversation_type": {
                    "type": "string",
                    "enum": ["whatsapp", "website", "instagram", "messenger"],
                    "description": "Optional source channel of the conversation.",
                    "example": "whatsapp"
                  },
                  "wa_message_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Optional array of WhatsApp message IDs to link with this message.",
                    "example": ["wamid.HBgMOTE4MjM3NTAyNjEwFQIA"]
                  },
                  "user_id": {
                    "type": "string",
                    "description": "Optional unique identifier of the user (internal mapping). Passing this will create a new contact if it doesn't exist in Chatzy AI.",
                    "example": "user-143242"
                  },
                  "client_message_key": {
                    "type": "string",
                    "description": "Optional unique identifier (client_message_key) used to link multiple audio inputs to a single user message. Each client_message_key is unique per user message and is generated before the user sends a message.\n\nExample:\n- A client generates a client_message_key (e.g., 'msg_123').\n- The user records and sends audio inputs 2-3 times. Each audio input request is sent to the `/stt` endpoint along with the same client_message_key. The server transcribes each audio input.\n- When the user finalizes their message, the same client_message_key is included in the `/get-inference` request. This links all the audio inputs, in the order they were provided, to the finalized user message.\n\nThis ensures conversations can be reconstructed accurately by mapping the final user message to the sequence of audio inputs associated with it.",
                    "example": "22bacb4e-43ff-41e2-9800-ac62f33104ec"
                  }
                }
              },
              "example": {
                "chatbot_id": "51de6a36-5532-49c2-888e-46754ce102ba",
                "conversation_id": "96333140-53c3-4d1d-bbd1-edd150d46ea2",
                "messages": {
                  "role": "user",
                  "content": "Hi, I'd like to plan my trip."
                },
                "conversation_type": "website"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User message accepted for processing.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "msg": {
                          "type": "string",
                          "example": "User message sent for processing"
                        },
                        "temp_token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/generate_secret": {
      "get": {
        "summary": "Generate Temporary Token for SSE",
        "description": "Generates a temporary JWT token to be used for streaming responses via the `/get-response` SSE endpoint.",
        "tags": ["Conversational AI Agent Interactions"],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Conversation ID to generate a temporary token for."
          }
        ],
        "responses": {
          "200": {
            "description": "Token generated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "temp_token": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get-response": {
      "get": {
        "summary": "Stream Conversation AI Agent Response (SSE)",
        "tags": ["Conversational AI Agent Interactions"],
        "servers": [
          {
            "url": "https://backend-1.chatzy.ai",
            "description": "SSE Streaming Host"
          }
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "description": "**Temporary access token** used to authenticate the Server-Sent Events (SSE) stream.\n\nThis token is obtained from the `/generate_secret` endpoint and also after sending a message to the AI agent via `/get_inference`.\n\nPass it as a query parameter like this:\n\n```\n/get-response?token=YOUR_TEMP_TOKEN\n```\n\nIf the token is missing or invalid, the server will respond with a `401 Unauthorized` error.",
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SSE stream opened. Messages will be sent continuously as `text/event-stream`.",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "example": "data: {\"content\": \"How\"}\n\ndata: {\"content\": \" can\"}\n\ndata: {\"content\": \" I\"}\n\ndata: {\"content\": \" assist\"}\n\ndata: {\"content\": \" you\"}\n\ndata: {\"content\": \" today\"}\n\ndata: {\"content\": \"?\"}\n\ndata: close_connection\n\n"
                }
              }
            }
          }
        }
      }
    },
    "/stt": {
      "post": {
        "summary": "Audio Input",
        "tags": ["Conversational AI Agent Interactions"],
        "servers": [
          {
            "url": "https://backend-1.chatzy.ai",
            "description": "SSE Streaming Host"
          }
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "description": "**Temporary access token** used to authenticate the endpoint.\n\nThis token is obtained from the `/generate_secret` endpoint. `\n\nIf the token is missing or invalid, the server will respond with a `401 Unauthorized` error.",
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
          },
          {
            "name": "chatbot_id",
            "in": "query",
            "required": true,
            "description": "UUID of the conversation AI Agent to which the message is sent.",
            "schema": {
              "type": "string",
              "example": "51de6a36-5532-49c2-888e-46754ce102ba"
            }
          },
          {
            "name": "client_message_key",
            "in": "query",
            "required": true,
            "description": "Unique identifier (UUID) that groups multiple audio inputs under a single user message. This key is generated on the client side before sending audio and must be included in each `/stt` request. All audio transcriptions sharing the same client_message_key will later be mapped together with the finalized user message when sent to `/get-inference`.",
            "schema": {
              "type": "string",
              "example": "51de6a36-5532-49c2-888e-46754ce102ba"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transcription generated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "transcript": {
                      "type": "string",
                      "description": "Final transcription text of the provided audio input.",
                      "example": "HELLO THERE\n"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/generate_presigned_url_no_auth": {
      "get": {
        "summary": "Generate Presigned URL for documents upload",
        "tags": ["Conversational AI Agent Interactions"],
        "parameters": [
          {
            "name": "file_type",
            "in": "query",
            "required": true,
            "description": "MIME type of the file to be uploaded. Only PDF and image files are supported.",
            "schema": {
              "type": "string",
              "enum": ["application/pdf", "image/png", "image/jpeg"],
              "example": "application/pdf"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pre-signed URL generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "description": "S3 bucket upload endpoint URL",
                              "example": "https://chatzy-kb-store.s3.us-east-1.amazonaws.com/"
                            },
                            "fields": {
                              "type": "object",
                              "description": "Form fields required for uploading the file",
                              "properties": {
                                "Content-Type": {
                                  "type": "string",
                                  "description": "MIME type of the file",
                                  "example": "application/pdf"
                                },
                                "bucket": {
                                  "type": "string",
                                  "example": "chatzy-kb-store"
                                },
                                "X-Amz-Algorithm": {
                                  "type": "string",
                                  "example": "AWS4-HMAC-SHA256"
                                },
                                "X-Amz-Credential": {
                                  "type": "string",
                                  "description": "AWS temporary credential string"
                                },
                                "X-Amz-Date": {
                                  "type": "string",
                                  "example": "20250821T075218Z"
                                },
                                "X-Amz-Security-Token": {
                                  "type": "string",
                                  "description": "Temporary session token"
                                },
                                "key": {
                                  "type": "string",
                                  "description": "S3 object key where the file will be stored",
                                  "example": "icons/3fa1d79c-79d5-48b0-abcc-65ab4cd0073a"
                                },
                                "Policy": {
                                  "type": "string",
                                  "description": "Base64-encoded policy document"
                                },
                                "X-Amz-Signature": {
                                  "type": "string",
                                  "description": "AWS signature for request validation"
                                }
                              },
                              "required": ["Content-Type", "bucket", "X-Amz-Algorithm", "X-Amz-Credential", "X-Amz-Date", "X-Amz-Security-Token", "key", "Policy", "X-Amz-Signature"]
                            }
                          },
                          "required": ["url", "fields"]
                        }
                      },
                      "required": ["url"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          }
        }
      }
    },
    "/get_stream_status": {
      "get": {
        "summary": "Get Stream Status",
        "tags": ["Conversational AI Agent Interactions"],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "query",
            "required": true,
            "description": "Conversation ID for which the stream status is to be checked.",
            "schema": {
              "type": "string",
              "example": "96333140-53c3-4d1d-bbd1-edd150d46ea2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stream status and messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "stream_status": {
                          "type": "string",
                          "enum": ["is_streaming", "completed"],
                          "description": "Current stream status"
                        },
                        "response_processing_status": {
                          "type": "string",
                          "enum": ["processing", "completed"],
                          "description": "Processing status of the assistant response"
                        },
                        "messages": {
                          "type": "array",
                          "description": "Latest 10 messages in the conversation",
                          "items": { "type": "object" }
                        }
                      },
                      "required": ["stream_status", "response_processing_status", "messages"]
                    }
                  },
                  "required": ["data"]
                }
              }
            }
          }
        }
      }
    },
    "/ai_agent/get_access_token": {
      "post": {
        "summary": "Get Access Token",
        "tags": ["Authorized iframe Access"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["user_id", "chatbot_id", "client_api_key"],
                "properties": {
                  "user_id": {
                    "type": "string",
                    "example": "user123 // client's customer id"
                  },
                  "chatbot_id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "8a1e3f18-991b-4a2e-9973-f53e7fc94ff1"
                  },
                  "client_api_key": {
                    "type": "string",
                    "description": "AI Agent Auth Key - Can be retrieved from https://app.chatzy.ai/profile",
                    "example": "ak-xxxxxxxxxxx"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access and refresh token response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "description": "JWT access token"
                        },
                        "refresh_token": {
                          "type": "string",
                          "description": "JWT refresh token"
                        },
                        "access_token_expires_at": {
                          "type": "integer",
                          "description": "Unix timestamp (ms) when access token expires",
                          "example": 1753453415000
                        },
                        "refresh_token_expires_at": {
                          "type": "integer",
                          "description": "Unix timestamp (ms) when refresh token expires",
                          "example": 1754057315000
                        }
                      },
                      "required": ["access_token", "refresh_token", "access_token_expires_in", "refresh_token_expires_in"]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ai_agent/refresh_token": {
      "post": {
        "summary": "Get New Access Token from Refresh Token",
        "tags": ["Authorized iframe Access"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["user_id", "chatbot_id", "refresh_token"],
                "properties": {
                  "user_id": {
                    "type": "string",
                    "description": "Client's customer ID",
                    "example": "user123"
                  },
                  "chatbot_id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "8a1e3f18-991b-4a2e-9973-f53e7fc94ff1"
                  },
                  "refresh_token": {
                    "type": "string",
                    "description": "Valid refresh token issued during initial access token generation",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New access token issued successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "description": "Newly issued JWT access token"
                        },
                        "expires_at": {
                          "type": "integer",
                          "description": "Unix timestamp (ms) when the new access token will expire",
                          "example": 1753454477000
                        }
                      },
                      "required": ["access_token", "expires_at"]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
